using AutoMapper;
using IMP.Application.Helpers;
using IMP.Application.Interfaces;
using IMP.Application.Models.ViewModels;
using IMP.Application.Wrappers;
using IMP.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace IMP.Application.Features.VoucherCodes.Commands.CreateVoucherCode
{
    public class CreateVoucherCodeCommand : ICommand<VoucherCodeViewModel>
    {
        [JsonIgnore]
        public int ApplicationUserId { get; set; }
        public int? InfluencerId { get; set; }
        public int VoucherId { get; set; }
        public string Code { get; set; }
        public bool IsAutoGenerated { get; set; }
    }

    public class CreateVoucherCodeCommandHandler : CommandHandler<CreateVoucherCodeCommand, VoucherCodeViewModel>
    {
        private IGenericRepository<Voucher> _voucherRepository;
        private IGenericRepository<VoucherCode> _voucherCodeRepository;
        public CreateVoucherCodeCommandHandler(IUnitOfWork unitOfWork, IMapper mapper) : base(unitOfWork, mapper)
        {
            _voucherCodeRepository = unitOfWork.Repository<VoucherCode>();
            _voucherRepository = unitOfWork.Repository<Voucher>();
        }

        public override async Task<Response<VoucherCodeViewModel>> Handle(CreateVoucherCodeCommand request, CancellationToken cancellationToken)
        {
            var voucher = await _voucherRepository.FindSingleAsync(x => x.Id == request.VoucherId, include: x => x.Include(y => y.VoucherCodes));
            if (voucher != null)
            {
                string code = request.Code;
                if (request.IsAutoGenerated)
                {
                    var voucherCodes = voucher.VoucherCodes.Select(x => x.Code);
                    do
                    {
                        code = StringHelper.RandomString(8, lowerCase: false);
                    } while (voucherCodes.Contains(code));
                }

                var voucherCode = new VoucherCode { Code = code, Quantity = voucher.Quantity };
                await _voucherCodeRepository.AddAsync(voucherCode);
                await UnitOfWork.CommitAsync();

                var voucherCodeView = Mapper.Map<VoucherCodeViewModel>(voucherCode);
            }

            return new Response<VoucherCodeViewModel>(message: "Voucher không tồn tại.");

        }
    }
}

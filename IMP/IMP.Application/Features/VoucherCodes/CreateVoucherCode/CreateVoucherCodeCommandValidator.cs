using FluentValidation;
using IMP.Application.Interfaces;
using IMP.Domain.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace IMP.Application.Features.VoucherCodes.Commands.CreateVoucherCode
{
    public class CreateVoucherCodeCommandValidator : AbstractValidator<CreateVoucherCodeCommand>
    {
        public CreateVoucherCodeCommandValidator(IUnitOfWork unitOfWork)
        {
            RuleFor(x => x.Code)
                .MaximumLength(50).WithMessage("Code không được quá 50 kí tự.")
                .MustAsync(async (voucherCode, code, cancelationToken) =>
              {
                  return await unitOfWork.Repository<VoucherCode>().IsExistAsync(predicate: x => x.VoucherId == voucherCode.VoucherId && code == x.Code);
              }).WithMessage("Code đã tồn tại.")
                .When(x => x.IsAutoGenerated)
                .WhenAsync(async (voucherCode, code, cancelationToken) =>
                {
                    return await unitOfWork.Repository<Voucher>().IsExistAsync(voucherCode.VoucherId);
                }).WithMessage("Voucher không tồn tại.");

            RuleFor(x => x.InfluencerId).MustAsync(async (x, y) =>
              {
                  return await unitOfWork.Repository<ApplicationUser>().IsExistAsync(x.Value);
              }).WithMessage("Influencer không tồn tại.").When(x => x.InfluencerId.HasValue);
        }
    }
}
